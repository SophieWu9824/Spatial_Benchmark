{
    "short-answer_question": {
        "1": {
            "Question": "Create a Mapbox map link that displays a standard map view of New York City. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/-74.0060,40.7128,10,0,0/600x400@2x?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA"
        },
        "2": {
            "Question": "Creates a Mapbox map link that displays a standard map view of central London. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9. pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/-0.1278,51.5074,13,0,0/600x400@2x?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA"
        },
        "3": {
            "Question": "Create a link to a Mapbox map of Vienna with satellite view. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/satellite-v9/static/16.3738,48.2082,13,0,0/600x400@2x?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA"
        },
        "4": {
            "Question": "Create a Mapbox map link from Vienna to Munich. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/geojson(%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22geometry%22%3A%7B%22type%22%3A%22Point%22%2C%22coordinates%22%3A%5B16.3738%2C48.2082%5D%7D%2C%22properties%22%3A%7B%22title%22%3A%22Vienna%22%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22geometry%22%3A%7B%22type%22%3A%22Point%22%2C%22coordinates%22%3A%5B11.5761%2C48.1371%5D%7D%2C%22properties%22%3A%7B%22title%22%3A%22Munich%22%7D%7D%5D%7D)/11.5761,48.1371,5.5,0,0/800x600?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA"
        },
        "5": {
            "Question": "Create a Mapbox map link that displays a standard map view of Tokyo City. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/139.6917,35.6895,10,0,0/800x600?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "6": {
            "Question": "Create a Mapbox map link that displays a standard map view of downtown Rio de Janeiro. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9. pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/-43.1729,-22.9068,10,0,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "7": {
            "Question": "Create a link to a Mapbox map of Cape Town with satellite view. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/satellite-v9/static/18.4241,-33.9249,10,0,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "8": {
            "Question": "Create a Mapbox map link from Bangkok to Singapore using the road view. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9. pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/geojson(%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22geometry%22%3A%7B%22type%22%3A%22Point%22%2C%22coordinates%22%3A%5B100.5018%2C13.7563%5D%7D%2C%22properties%22%3A%7B%22title%22%3A%22Bangkok%22%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22geometry%22%3A%7B%22type%22%3A%22Point%22%2C%22coordinates%22%3A%5B103.8198%2C1.3521%5D%7D%2C%22properties%22%3A%7B%22title%22%3A%22Singapore%22%7D%7D%5D%7D)/102.1608,7.5542,4,0,0/800x600?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA"
        },
        "9": {
            "Question": "Create a Mapbox map link that displays a standard map view of the city of Buenos Aires. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9. pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/-58.3816,-34.6037,10,0,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA"
        },
        "10": {
            "Question": "Create a Mapbox map link that displays a standard map view of downtown Cairo. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9. pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/31.2357,30.0444,10,0,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA"
        },
        "11": {
            "Question": "Create a link to the Moscow Mapbox map with satellite view. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/satellite-v9/static/37.6173,55.7558,10,0,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "12": {
            "Question": "Create a Mapbox map link from Sydney to Melbourne, using the road view. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9. pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/geojson(%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22geometry%22%3A%7B%22type%22%3A%22Point%22%2C%22coordinates%22%3A%5B151.2093%2C-33.8688%5D%7D%2C%22properties%22%3A%7B%22title%22%3A%22Sydney%22%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22geometry%22%3A%7B%22type%22%3A%22Point%22%2C%22coordinates%22%3A%5B144.9631%2C-37.8136%5D%7D%2C%22properties%22%3A%7B%22title%22%3A%22Melbourne%22%7D%7D%5D%7D)/148.0862,-35.8412,6,0,0/800x600?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "13": {
            "Question": "Create a Mapbox map link that displays a standard map view of Jakarta City. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/106.8272,-6.2088,10,0,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "14": {
            "Question": "Create a Mapbox map link that displays a standard map view of downtown Toronto. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9. pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/-79.3832,43.6532,10,0,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "15": {
            "Question": "Create a Mapbox map link that displays a standard map view of the city of Paris. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/2.3522,48.8566,10,0,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "16": {
            "Question": "Create Mapbox map links that show a standard map view of Berlin city center. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9. pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/13.4049,52.5200,10,0,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "17": {
            "Question": "Create a link to a Mapbox map of Prague with satellite view. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/satellite-v9/static/14.4378,50.0755,10,0,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "18": {
            "Question": "Create a Mapbox map link from Budapest to Warsaw, using the road view. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9. pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/geojson(%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22geometry%22%3A%7B%22type%22%3A%22Point%22%2C%22coordinates%22%3A%5B19.0402%2C47.4979%5D%7D%2C%22properties%22%3A%7B%22title%22%3A%22Budapest%22%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22geometry%22%3A%7B%22type%22%3A%22Point%22%2C%22coordinates%22%3A%5B21.0122%2C52.2297%5D%7D%2C%22properties%22%3A%7B%22title%22%3A%22Warsaw%22%7D%7D%5D%7D)/20.0262,49.8638,5,0,0/800x600?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "19": {
            "Question": "Create a Mapbox map link that displays a standard map view of the city of Stockholm. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9. pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/18.0686,59.3293,10,0,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "20": {
            "Question": "Create a Mapbox map link that displays a standard map view of Helsinki city center. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9. pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/24.9384,60.1695,10,0,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "21": {
            "Question": "Create a link to a Mapbox map of Tallinn with satellite view. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/satellite-v9/static/24.7536,59.4369,10,0,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "22": {
            "Question": "Create a Mapbox map link from Lisbon to Madrid using the road view. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9. pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/geojson(%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22geometry%22%3A%7B%22type%22%3A%22Point%22%2C%22coordinates%22%3A%5B-9.1393%2C38.7223%5D%7D%2C%22properties%22%3A%7B%22title%22%3A%22Lisbon%22%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22geometry%22%3A%7B%22type%22%3A%22Point%22%2C%22coordinates%22%3A%5B-3.7038%2C40.4168%5D%7D%2C%22properties%22%3A%7B%22title%22%3A%22Madrid%22%7D%7D%5D%7D)/-6.42155,39.56955,6,0,0/800x600?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "23": {
            "Question": "Create a Mapbox map link that displays a standard map view of the city of Zurich. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/8.5417,47.3769,10,0,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "24": {
            "Question": "Create Mapbox map link that displays a standard map view of Vilnius city center. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9. pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/25.2797,54.6872,10,0,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "25": {
            "Question": "Create a link to the Mapbox map of Belgrade with satellite view. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/satellite-v9/static/20.4489,44.7866,10,0,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "26": {
            "Question": "Create a Mapbox map link from Oslo to Copenhagen, using the road view. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9. pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/geojson(%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22geometry%22%3A%7B%22type%22%3A%22Point%22%2C%22coordinates%22%3A%5B10.7522%2C59.9139%5D%7D%2C%22properties%22%3A%7B%22title%22%3A%22Oslo%22%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22geometry%22%3A%7B%22type%22%3A%22Point%22%2C%22coordinates%22%3A%5B12.5683%2C55.6761%5D%7D%2C%22properties%22%3A%7B%22title%22%3A%22Copenhagen%22%7D%7D%5D%7D)/11.66025,57.7950,5,0,0/800x600?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "27": {
            "Question": "Create a Mapbox map link that displays a standard map view of the city of Riga. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/24.1052,56.9496,10,0,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "28": {
            "Question": "Create Mapbox map link that displays a standard map view of Dublin city center. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9. pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/-6.2603,53.3498,10,0,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "29": {
            "Question": "Create link to Mapbox map of Ankara with satellite view. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/satellite-v9/static/32.8597,39.9334,10,0,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "30": {
            "Question": "Create a Mapbox map link from Sarajevo to Pristina, Kosovo, using the road view. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9. pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/geojson(%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22geometry%22%3A%7B%22type%22%3A%22Point%22%2C%22coordinates%22%3A%5B18.4131%2C43.8563%5D%7D%2C%22properties%22%3A%7B%22title%22%3A%22Sarajevo%22%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22geometry%22%3A%7B%22type%22%3A%22Point%22%2C%22coordinates%22%3A%5B21.1669%2C42.6629%5D%7D%2C%22properties%22%3A%7B%22title%22%3A%22Pristina%22%7D%7D%5D%7D)/19.79,43.2596,7,0,0/800x600?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "31": {
            "Question": "Create Mapbox map links that display a standard map view of the City of San Diego. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9. pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/-117.1611,32.7157,8,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "32": {
            "Question": "Create a Mapbox map link that displays a standard map view of downtown Lima. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9. pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/-77.0428,-12.0464,13,0,0/800x600?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "33": {
            "Question": "Create a link to a Mapbox map of Caracas with satellite view. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/satellite-v9/static/-66.9036,10.4806,10,0,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "34": {
            "Question": "Create a link to a Mapbox map from Quito to Bogota, using the road view. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9. pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/geojson(%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22geometry%22%3A%7B%22type%22%3A%22Point%22%2C%22coordinates%22%3A%5B-78.4678%2C-0.1807%5D%7D%2C%22properties%22%3A%7B%22title%22%3A%22Quito%22%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22geometry%22%3A%7B%22type%22%3A%22Point%22%2C%22coordinates%22%3A%5B-74.0721%2C4.7110%5D%7D%2C%22properties%22%3A%7B%22title%22%3A%22Bogota%22%7D%7D%5D%7D)/-76.26995,2.26515,6,0,0/800x600?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "35": {
            "Question": "Create a Mapbox map link that displays a standard map view of the City of Los Angeles. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/-118.2437,34.0522,10,0,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "36": {
            "Question": "Create a Mapbox map link that displays a standard map view of downtown San Francisco. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9. pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/-122.4194,37.7749,10,0,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "37": {
            "Question": "Create a link to a Mapbox map of New York City with satellite view. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/satellite-v9/static/-74.0060,40.7128,10,0,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "38": {
            "Question": "Create a Mapbox map link from Miami to Atlanta, using the road view. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9. pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/geojson(%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22geometry%22%3A%7B%22type%22%3A%22Point%22%2C%22coordinates%22%3A%5B-80.1918%2C25.7617%5D%7D%2C%22properties%22%3A%7B%22title%22%3A%22Miami%22%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22geometry%22%3A%7B%22type%22%3A%22Point%22%2C%22coordinates%22%3A%5B-84.3880%2C33.7490%5D%7D%2C%22properties%22%3A%7B%22title%22%3A%22Atlanta%22%7D%7D%5D%7D)/-82.2899,29.75535,6,0,0/800x600?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "39": {
            "Question": "Create a Mapbox map link that displays a standard map view of the City of Portland. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/-122.6765,45.5231,10,0,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "40": {
            "Question": "Create a Mapbox map link that displays a standard map view of downtown Salt Lake City. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9. pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/-111.891,40.7608,10,0,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "41": {
            "Question": "Create a link to a Mapbox map of Las Vegas with satellite view. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/satellite-v9/static/-115.1499,36.1699,10,0,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "42": {
            "Question": "Create a Mapbox map link from Mexico City to Guadalajara, using the road view. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9. pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/geojson(%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22geometry%22%3A%7B%22type%22%3A%22Point%22%2C%22coordinates%22%3A%5B-99.1332%2C19.4326%5D%7D%2C%22properties%22%3A%7B%22title%22%3A%22Mexico%20City%22%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22geometry%22%3A%7B%22type%22%3A%22Point%22%2C%22coordinates%22%3A%5B-103.3496%2C20.6597%5D%7D%2C%22properties%22%3A%7B%22title%22%3A%22Guadalajara%22%7D%7D%5D%7D)/-101.2414,20.04615,6,0,0/800x600?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "43": {
            "Question": "Create a Mapbox map link that displays a standard map view of the city of Helsinki. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9. pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/24.9384,60.1695,10,0,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "44": {
            "Question": "Create a Mapbox map link that displays a standard map view of Zurich city center. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9. pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/8.5417,47.3769,10,0,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "45": {
            "Question": "Create a link to a Mapbox map of Beijing with satellite view. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/satellite-v9/static/116.4074,39.9042,10,0,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "46": {
            "Question": "Create a link to a Mapbox map of Shanghai with satellite view. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/satellite-v9/static/121.4737,31.2304,10,0,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "47": {
            "Question": "Create a link to a Mapbox map of Shenzhen with satellite view. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/satellite-v9/static/114.0579,22.5431,10,0,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "48": {
            "Question": "Create a link to a Mapbox map of Chengdu with satellite view. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/satellite-v9/static/104.0657,30.6595,10,0,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "49": {
            "Question": "Create a Mapbox map link that displays a standard map view of downtown Beijing. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9. pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/116.4074,39.9042,10,0,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "50": {
            "Question": "Create a Mapbox map link that displays a standard map view of downtown Shanghai. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9. pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/121.4737,31.2304,10,0,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "51": {
            "Question": "Create a Mapbox map link that displays a standard map view of downtown Hangzhou. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9. pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/120.1551,30.2741,10,0,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "52": {
            "Question": "Create a Mapbox map link that displays a standard map view of downtown Changsha. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9. pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/112.9388,28.2282,10,0,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "53": {
            "Question": "Create a Mapbox map link that displays a standard map view of downtown Zhengzhou. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9. pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/113.6249,34.7466,10,0,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "54": {
            "Question": "Create a Mapbox map link that displays a standard map view of downtown Xi'an. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9. pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/108.9398,34.3430,10,0,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "55": {
            "Question": "Generate a Mapbox map link that displays Sydney using the road view and has a map size of 800x600 pixels. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9. pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/151.2093,-33.8688,10,0,0/800x600?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "56": {
            "Question": "Create a link to the Mapbox map of Vienna. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/16.3721,48.2082,10,0,0/600x400?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA"
        },
        "57": {
            "Question": "Create a Mapbox map link from Seoul to Incheon using the road view. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9. pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/geojson(%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22geometry%22%3A%7B%22type%22%3A%22Point%22%2C%22coordinates%22%3A%5B126.9784%2C37.5665%5D%7D%2C%22properties%22%3A%7B%22title%22%3A%22Seoul%22%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22geometry%22%3A%7B%22type%22%3A%22Point%22%2C%22coordinates%22%3A%5B126.7052%2C37.4565%5D%7D%2C%22properties%22%3A%7B%22title%22%3A%22Incheon%22%7D%7D%5D%7D)/126.8418,37.5115,10/800x600?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "58": {
            "Question": "Create a link to a Mapbox map from Tokyo City to Saitama City, with satellite view required. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9. pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/satellite-v9/static/geojson(%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22geometry%22%3A%7B%22type%22%3A%22Point%22%2C%22coordinates%22%3A%5B139.6917%2C35.6895%5D%7D%2C%22properties%22%3A%7B%22title%22%3A%22Tokyo%22%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22geometry%22%3A%7B%22type%22%3A%22Point%22%2C%22coordinates%22%3A%5B139.6455%2C35.8616%5D%7D%2C%22properties%22%3A%7B%22title%22%3A%22Saitama%22%7D%7D%5D%7D)/139.6686,35.7756,10/800x600?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "59": {
            "Question": "Create a link to a Mapbox map of Saipan. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/geojson(%7B%22type%22%3A%22FeatureCollection%22%2C%22features%22%3A%5B%7B%22type%22%3A%22Feature%22%2C%22geometry%22%3A%7B%22type%22%3A%22Point%22%2C%22coordinates%22%3A%5B145.7467%2C15.1858%5D%7D%2C%22properties%22%3A%7B%22title%22%3A%22Saipan%22%7D%7D%5D%7D)/145.7467,15.1858,10/800x600?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "60": {
            "Question": "Create a link to a Mapbox map of the University of Sydney. access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\nPlease return a link directly",
            "Answer": "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/pin-l+555555(151.1869,-33.8886)/151.1869,-33.8886,15/500x300?access_token=pk.eyJ1IjoiaG9jaG1haXIiLCJhIjoiY2xvZmN3em02MG0yZjJscWVsem5ic29rMiJ9.pgqHqjH6Jnlc7O1geqxJPA\n"
        },
        "61": {
            "Question": "Code was written using Python's folium library to create an interactive map showing the number of COVID-19 cases in each state in the U.S. The data is available directly from Johns Hopkins University's COVID-19 GitHub repository.",
            "Answer": "import pandas as pd\nimport folium\nimport json\nimport requests\n\n# \u00bb\u00f1\u00c8\u00a1\u00d7\u00ee\u00d0\u00c2\u00b5\u00c4\u00c3\u00c0\u00b9\u00faCOVID-19\u00b2\u00a1\u00c0\u00fd\u00ca\u00fd\u00be\u00dd\nurl = \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv\"\ndata = pd.read_csv(url)\n\n# \u00bb\u00e3\u00d7\u00dc\u00c3\u00bf\u00b8\u00f6\u00d6\u00dd\u00b5\u00c4\u00d7\u00ee\u00d0\u00c2\u00b2\u00a1\u00c0\u00fd\u00ca\u00fd\nlatest_date = data.columns[-1]\nstate_cases = data.groupby('Province_State').sum()[latest_date].reset_index()\nstate_cases.columns = ['State', 'Cases']\n\n# \u00bc\u00d3\u00d4\u00d8\u00c3\u00c0\u00b9\u00fa\u00b8\u00f7\u00d6\u00dd\u00b5\u00c4GeoJSON\u00b1\u00df\u00bd\u00e7\u00ca\u00fd\u00be\u00dd\ngeo_url = 'https://raw.githubusercontent.com/PublicaMundi/MappingAPI/master/data/geojson/us-states.json'\ngeo_json_data = json.loads(requests.get(geo_url).text)\n\n# \u00b4\u00b4\u00bd\u00a8\u00b5\u00d8\u00cd\u00bc\u00a3\u00ac\u00d6\u00d0\u00d0\u00c4\u00b6\u00a8\u00ce\u00bb\u00d4\u00da\u00c3\u00c0\u00b9\u00fa\nm = folium.Map(location=[37.8, -96], zoom_start=4)\n\n# \u00c9\u00fa\u00b3\u00c9\u00d1\u00d5\u00c9\u00ab\u00d3\u00b3\u00c9\u00e4\ncolormap = folium.LinearColormap(\n    colors=['green', 'yellow', 'red'],\n    vmin=state_cases.Cases.min(),\n    vmax=state_cases.Cases.max(),\n    caption='COVID-19 Cases in the USA'\n)\n\n# \u00cc\u00ed\u00bc\u00d3\u00d1\u00d5\u00c9\u00ab\u00cc\u00f5\nm.add_child(colormap)\n\n# \u00cc\u00ed\u00bc\u00d3GeoJSON\u00cd\u00bc\u00b2\u00e3\nfolium.GeoJson(\n    geo_json_data,\n    name='COVID-19 Cases',\n    style_function=lambda feature: {\n        'fillColor': colormap(state_cases[state_cases['State'] == feature['properties']['name']].Cases.iloc[0]),\n        'color': 'black',\n        'weight': 1,\n        'dashArray': '5, 5',\n        'fillOpacity': 0.6,\n    },\n    tooltip=folium.GeoJsonTooltip(\n        fields=['name'],\n        aliases=['State: '],\n        style=(\"background-color: white; color: #333333; font-family: Arial; font-size: 12px; padding: 10px;\"),\n        labels=True,\n        sticky=False\n    )\n).add_to(m)\n\n# \u00b1\u00a3\u00b4\u00e6\u00b5\u00d8\u00cd\u00bc\u00b5\u00bdHTML\u00ce\u00c4\u00bc\u00fe\nm.save('us_covid19_cases_map.html')\n\n# \u00cf\u00d4\u00ca\u00be\u00b5\u00d8\u00cd\u00bc\nm\n"
        },
        "62": {
            "Question": "Using Python's geopandas and contextily libraries, create a map showing the Air Quality Index (AQI) for major cities around the world, with data dynamically available from the World Air Quality Index project website.token = '3ec833f90c4ae5172f93f74e5681a1656d41a06a'",
            "Answer": "import geopandas as gpd\nimport contextily as ctx\nimport matplotlib.pyplot as plt\nimport requests\n\n# \u00bb\u00f1\u00c8\u00a1\u00bf\u00d5\u00c6\u00f8\u00d6\u00ca\u00c1\u00bf\u00ca\u00fd\u00be\u00dd\ntoken = '3ec833f90c4ae5172f93f74e5681a1656d41a06a'  # \u00cc\u00e6\u00bb\u00bb\u00ce\u00aa\u00c4\u00e3\u00b5\u00c4World Air Quality Index API\u00c1\u00ee\u00c5\u00c6\nurl = f\"http://api.waqi.info/map/bounds/?latlng=90,-180,-90,180&token={token}\"\nresponse = requests.get(url)\ndata = response.json()['data']\n\n# \u00b4\u00b4\u00bd\u00a8GeoDataFrame\u00b2\u00a2\u00c9\u00e8\u00d6\u00c3\u00bc\u00b8\u00ba\u00ce\u00c1\u00d0\ngdf = gpd.GeoDataFrame(data)\ngdf['geometry'] = gpd.points_from_xy(gdf.lon, gdf.lat)\ngdf.set_geometry('geometry', inplace=True)\ngdf.crs = 'EPSG:4326'\n\n# \u00bb\u00e6\u00d6\u00c6\u00b5\u00d8\u00cd\u00bc\nfig, ax = plt.subplots(figsize=(10, 10))\ngdf.plot(ax=ax, column='aqi', cmap='viridis', legend=True,\n         legend_kwds={'title': \"Air Quality Index (AQI)\"})\n\n# \u00cc\u00ed\u00bc\u00d3\u00b5\u00d7\u00cd\u00bc\nctx.add_basemap(ax, crs=gdf.crs.to_string(), source=ctx.providers.CartoDB.Positron)\n\n# \u00cf\u00d4\u00ca\u00be\u00cd\u00bc\nplt.show()\n"
        },
        "63": {
            "Question": "Code was generated based on Python's cartopy library to create a map showing major global seismic activity from 2010 to the present, with data available in real time from the U.S. Geological Survey's (USGS) Seismic Data API.",
            "Answer": "import cartopy.crs as ccrs\nimport matplotlib.pyplot as plt\nimport requests\nimport json\n\n# \u00b6\u00a8\u00d2\u00e5\u00bb\u00f1\u00c8\u00a1\u00b5\u00d8\u00d5\u00f0\u00ca\u00fd\u00be\u00dd\u00b5\u00c4\u00ba\u00af\u00ca\u00fd\ndef fetch_earthquake_data(start_year=2010, end_year=2024, min_magnitude=5.5):\n    # \u00b9\u00b9\u00bd\u00a8\u00c7\u00eb\u00c7\u00f3URL\n    url = f\"https://earthquake.usgs.gov/fdsnws/event/1/query?format=geojson&starttime={start_year}-01-01&endtime={end_year}-01-01&minmagnitude={min_magnitude}\"\n    response = requests.get(url)\n    try:\n        earthquake_data = response.json()\n        return earthquake_data\n    except json.JSONDecodeError:\n        print(f\"Failed to decode JSON response: {response.text}\")\n        return None\n\n# \u00bb\u00f1\u00c8\u00a1\u00c1\u00bd\u00b8\u00f6\u00ca\u00b1\u00bc\u00e4\u00b6\u00ce\u00b5\u00c4\u00b5\u00d8\u00d5\u00f0\u00ca\u00fd\u00be\u00dd\ndata_first_half = fetch_earthquake_data(2010, 2017, 5.5)\ndata_second_half = fetch_earthquake_data(2017, 2024, 5.5)\n\n# \u00c9\u00e8\u00d6\u00c3\u00b5\u00d8\u00cd\u00bc\u00ba\u00cd\u00cd\u00b6\u00d3\u00b0\nfig = plt.figure()\nax = fig.add_subplot(1, 1, 1, projection=ccrs.PlateCarree())\nax.set_global()\nax.coastlines()\n\n# \u00cd\u00a8\u00b9\u00fd\u00b5\u00d8\u00d5\u00f0\u00ca\u00fd\u00be\u00dd\u00cc\u00ed\u00bc\u00d3\u00b5\u00e3\u00b5\u00bd\u00b5\u00d8\u00cd\u00bc\ndef plot_earthquakes(data):\n    if data:\n        for feature in data['features']:\n            lon, lat = feature['geometry']['coordinates'][0:2]\n            magnitude = feature['properties']['mag']\n            ax.plot(lon, lat, 'ro', markersize=magnitude - 4, transform=ccrs.Geodetic())\n\nplot_earthquakes(data_first_half)\nplot_earthquakes(data_second_half)\n\n# \u00cc\u00ed\u00bc\u00d3\u00b1\u00ea\u00cc\u00e2\nplt.title('Global Earthquake Activity from 2010 to Present')\n\n# \u00cf\u00d4\u00ca\u00be\u00b5\u00d8\u00cd\u00bc\nplt.show()\n"
        },
        "64": {
            "Question": "Using Python's matplotlib and pandas libraries, a graph showing the change in global average temperature over the last decade, with data available from NASA's Open Data Portal.",
            "Answer": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n# NASA\u00c6\u00f8\u00ce\u00c2\u00ca\u00fd\u00be\u00ddURL\nurl = \"https://data.giss.nasa.gov/gistemp/tabledata_v4/GLB.Ts+dSST.csv\"\n\n# \u00b6\u00c1\u00c8\u00a1CSV\u00ca\u00fd\u00be\u00dd\ndata = pd.read_csv(url, skiprows=1)  # \u00cc\u00f8\u00b9\u00fd\u00ce\u00c4\u00bc\u00fe\u00cd\u00b7\u00b2\u00bf\u00b5\u00c4\u00bc\u00b8\u00d0\u00d0\n\n# \u00b4\u00a6\u00c0\u00ed\u00ca\u00fd\u00be\u00dd\ndata = data.rename(columns={'Year': 'year'}).set_index('year')\ndata = data.iloc[:-1, :]  # \u00d2\u00c6\u00b3\u00fd\u00d7\u00ee\u00ba\u00f3\u00d2\u00bb\u00d0\u00d0\u00d7\u00dc\u00bc\u00c6\u00ca\u00fd\u00be\u00dd\ndata.index = pd.to_numeric(data.index)\n\n# \u00b9\u00fd\u00c2\u00cb\u00b9\u00fd\u00c8\u00a5\u00ca\u00ae\u00c4\u00ea\u00b5\u00c4\u00ca\u00fd\u00be\u00dd\nlast_10_years = data.tail(10)\n\n# \u00bb\u00e6\u00d6\u00c6\u00cd\u00bc\u00b1\u00ed\nplt.figure(figsize=(10, 5))\nplt.plot(last_10_years.index, last_10_years['J-D'], marker='o', linestyle='-')\nplt.title('Global Mean Temperature Change Over the Last 10 Years')\nplt.xlabel('Year')\nplt.ylabel('Temperature Anomaly (\u00a1\u00e3C)')\nplt.grid(True)\nplt.show()\n"
        },
        "65": {
            "Question": "Use Python and the folium library to create an interactive map showing real-time Air Quality Index (AQI) for major cities around the world. Data is available directly from the World AQI Project API.token = '3ec833f90c4ae5172f93f74e5681a1656d41a06a'",
            "Answer": "import folium\nimport requests\n\n# \u00ca\u00b9\u00d3\u00c3\u00c4\u00fa\u00d7\u00d4\u00bc\u00ba\u00b5\u00c4API\u00c3\u00dc\u00d4\u00bf\u00cc\u00e6\u00bb\u00bb 'YOUR_API_KEY_HERE'\napi_key = '3ec833f90c4ae5172f93f74e5681a1656d41a06a'\nurl = f\"https://api.waqi.info/mapq/bounds/?bounds=-90,-180,90,180&token={api_key}\"\n\n# \u00bb\u00f1\u00c8\u00a1\u00ca\u00fd\u00be\u00dd\nresponse = requests.get(url)\ndata = response.json()\n\n# \u00b4\u00b4\u00bd\u00a8\u00b5\u00d8\u00cd\u00bc\nmap_aqi = folium.Map(location=[20, 0], zoom_start=2)\n\n# \u00cc\u00ed\u00bc\u00d3\u00b1\u00ea\u00bc\u00c7\nfor item in data:  # \u00d6\u00b1\u00bd\u00d3\u00b5\u00fc\u00b4\u00fadata\u00c1\u00d0\u00b1\u00ed\n    lat, lon = item['lat'], item['lon']\n    aqi = item['aqi']\n    folium.Marker([lat, lon], popup=f\"AQI: {aqi}\").add_to(map_aqi)\n\n# \u00cf\u00d4\u00ca\u00be\u00b5\u00d8\u00cd\u00bc\nmap_aqi.save('global_aqi_map.html')\n"
        },
        "66": {
            "Question": "Using Python and the matplotlib library, a graph showing the ratio of COVID-19 cumulative confirmed cases to deaths by state in the United States. The data is available directly from Johns Hopkins University's COVID-19 GitHub repository.",
            "Answer": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n# \u00ca\u00fd\u00be\u00ddURL\nconfirmed_url = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv'\ndeaths_url = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_US.csv'\n\n# \u00cf\u00c2\u00d4\u00d8\u00ca\u00fd\u00be\u00dd\nconfirmed_df = pd.read_csv(confirmed_url)\ndeaths_df = pd.read_csv(deaths_url)\n\n# \u00bb\u00f1\u00c8\u00a1\u00d7\u00ee\u00d0\u00c2\u00d2\u00bb\u00cc\u00ec\u00b5\u00c4\u00c8\u00d5\u00c6\u00da\nlatest_date = confirmed_df.columns[-1]\n\n# \u00ca\u00fd\u00be\u00dd\u00b4\u00a6\u00c0\u00ed\n# \u00bc\u00c6\u00cb\u00e3\u00c3\u00bf\u00b8\u00f6\u00d6\u00dd\u00b5\u00c4\u00c0\u00db\u00bc\u00c6\u00c8\u00b7\u00d5\u00ef\u00ba\u00cd\u00cb\u00c0\u00cd\u00f6\u00b2\u00a1\u00c0\u00fd\nstate_confirmed = confirmed_df.groupby('Province_State')[latest_date].sum()\nstate_deaths = deaths_df.groupby('Province_State')[latest_date].sum()\n\n# \u00bc\u00c6\u00cb\u00e3\u00cb\u00c0\u00cd\u00f6\u00b1\u00c8\u00c0\u00fd\nstate_death_ratio = (state_deaths / state_confirmed) * 100\n\n# \u00bb\u00e6\u00d6\u00c6\u00cd\u00bc\u00b1\u00ed\nplt.figure(figsize=(10, 7))\nstate_death_ratio.sort_values().plot(kind='barh', color='red')\nplt.title('COVID-19 Death to Case Ratio by State')\nplt.xlabel('Death to Case Ratio (%)')\nplt.ylabel('State')\nplt.grid(True)\nplt.show()\n"
        },
        "67": {
            "Question": "Create an interactive map utilizing Python's folium library to display the highest Air Quality Index (AQI) recorded for major cities around the world over the past week. The data is dynamically available from the World Air Quality Index project website.token = '3ec833f90c4ae5172f93f74e5681a1656d41a06a'",
            "Answer": "import folium\nimport requests\n\n# \u00b3\u00f5\u00ca\u00bc\u00bb\u00af\u00b5\u00d8\u00cd\u00bc\nmap = folium.Map(location=[0, 0], zoom_start=2)\n\n# API\u00c3\u00dc\u00d4\u00bf\u00ba\u00cd\u00c7\u00eb\u00c7\u00f3URL\napi_key = '3ec833f90c4ae5172f93f74e5681a1656d41a06a'\nurl = f\"http://api.waqi.info/feed/here/?token={api_key}\"\n\n# \u00b7\u00a2\u00cb\u00cd\u00c7\u00eb\u00c7\u00f3\u00bb\u00f1\u00c8\u00a1\u00ca\u00fd\u00be\u00dd\nresponse = requests.get(url)\ndata = response.json()\n\n# \u00bc\u00ec\u00b2\u00e9\u00cf\u00ec\u00d3\u00a6\u00d7\u00b4\u00cc\u00ac\nif data['status'] == 'ok':\n    city_data = data['data']\n\n    # \u00bb\u00f1\u00c8\u00a1\u00b3\u00c7\u00ca\u00d0\u00c3\u00fb\u00b3\u00c6\u00a1\u00a2\u00b5\u00d8\u00c0\u00ed\u00d7\u00f8\u00b1\u00ea\u00ba\u00cdAQI\n    if isinstance(city_data, dict) and 'city' in city_data:\n        if isinstance(city_data['city'], dict):\n            city_name = city_data['city']['name']\n            latitude, longitude = city_data['city']['geo']\n            aqi = city_data['aqi']\n\n            # \u00d4\u00da\u00b5\u00d8\u00cd\u00bc\u00c9\u00cf\u00cc\u00ed\u00bc\u00d3\u00b1\u00ea\u00bc\u00c7\n            folium.Marker(\n                location=[latitude, longitude],\n                popup=f\"{city_name}: AQI={aqi}\",\n                icon=folium.Icon(color='red' if aqi > 100 else 'green')\n            ).add_to(map)\n\n# \u00b1\u00a3\u00b4\u00e6\u00b5\u00d8\u00cd\u00bc\u00bb\u00f2\u00d6\u00b1\u00bd\u00d3\u00cf\u00d4\u00ca\u00be\nmap.save('aqi_map.html')\n"
        },
        "68": {
            "Question": "Code was written using Python's cartopy library to create a map showing hotspots of global seismic activity over the past month, with data available in real time from the U.S. Geological Survey's (USGS) Seismic Data API.",
            "Answer": "import cartopy.crs as ccrs\nimport matplotlib.pyplot as plt\nimport requests\nimport json\n\n# USGS\u00b5\u00d8\u00d5\u00f0\u00ca\u00fd\u00be\u00ddAPI URL\nurl = \"https://earthquake.usgs.gov/fdsnws/event/1/query?format=geojson&starttime=2024-04-01&endtime=2024-05-01\"\n\n# \u00bb\u00f1\u00c8\u00a1\u00ca\u00fd\u00be\u00dd\nresponse = requests.get(url)\nearthquake_data = response.json()\n\n# \u00b4\u00b4\u00bd\u00a8\u00b5\u00d8\u00cd\u00bc\nfig = plt.figure(figsize=(10, 5))\nax = fig.add_subplot(1, 1, 1, projection=ccrs.PlateCarree())\nax.coastlines()\n\n# \u00bd\u00e2\u00ce\u00f6\u00b5\u00d8\u00d5\u00f0\u00ca\u00fd\u00be\u00dd\u00b2\u00a2\u00d4\u00da\u00b5\u00d8\u00cd\u00bc\u00c9\u00cf\u00bb\u00e6\u00d6\u00c6\nfor feature in earthquake_data['features']:\n    lon, lat = feature['geometry']['coordinates'][:2]\n    magnitude = feature['properties']['mag']\n\n    # \u00d6\u00bb\u00d3\u00d0\u00b5\u00b1\u00d5\u00f0\u00bc\u00b6\u00b2\u00bb\u00ca\u00c7None\u00ca\u00b1\u00b2\u00c5\u00bb\u00e6\u00d6\u00c6\n    if magnitude is not None:\n        ax.plot(lon, lat, marker='o', color='red', markersize=magnitude * 2, alpha=0.5, transform=ccrs.Geodetic())\n    else:\n        # \u00c8\u00e7\u00b9\u00fb\u00c3\u00bb\u00d3\u00d0\u00d5\u00f0\u00bc\u00b6\u00d0\u00c5\u00cf\u00a2\u00a3\u00ac\u00ca\u00b9\u00d3\u00c3\u00c4\u00ac\u00c8\u00cf\u00b4\u00f3\u00d0\u00a1\n        ax.plot(lon, lat, marker='o', color='red', markersize=5, alpha=0.5, transform=ccrs.Geodetic())\n\n# \u00cc\u00ed\u00bc\u00d3\u00b5\u00d8\u00cd\u00bc\u00b1\u00ea\u00cc\u00e2\u00ba\u00cd\u00cf\u00d4\u00ca\u00be\u00b5\u00d8\u00cd\u00bc\nplt.title('Global Earthquake Activity in the Past Month')\nplt.show()\n"
        },
        "69": {
            "Question": "Using Python's geopandas and matplotlib libraries, create a graph showing the change in average global temperature recorded in NASA data for each month of the last decade. The data is available from NASA's Open Data Portal.",
            "Answer": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n# NASA GISTEMP \u00c8\u00ab\u00c7\u00f2\u00d4\u00c2\u00c6\u00bd\u00be\u00f9\u00c6\u00f8\u00ce\u00c2\u00ca\u00fd\u00be\u00dd\nurl = \"https://data.giss.nasa.gov/gistemp/tabledata_v4/GLB.Ts+dSST.csv\"\n\n# \u00ca\u00b9\u00d3\u00c3 pandas \u00d6\u00b1\u00bd\u00d3\u00b4\u00d3 URL \u00bc\u00d3\u00d4\u00d8\u00ca\u00fd\u00be\u00dd\ndata = pd.read_csv(url, skiprows=1)  # \u00cc\u00f8\u00b9\u00fd\u00ce\u00c4\u00bc\u00fe\u00bf\u00aa\u00cd\u00b7\u00b5\u00c4\u00b2\u00bb\u00b9\u00e6\u00d4\u00f2\u00d0\u00d0\n\n# \u00b2\u00e9\u00bf\u00b4\u00ca\u00fd\u00be\u00dd\u00bd\u00e1\u00b9\u00b9\u00a3\u00ac\u00c8\u00b7\u00b6\u00a8\u00c8\u00e7\u00ba\u00ce\u00b4\u00a6\u00c0\u00ed\nprint(data.head())\n\n# \u00d7\u00aa\u00bb\u00bb\u00c4\u00ea\u00b7\u00dd\u00ce\u00aa\u00c8\u00d5\u00c6\u00da\u00a3\u00ac\u00b2\u00a2\u00bc\u00c6\u00cb\u00e3\u00c8\u00ab\u00c4\u00ea\u00c6\u00bd\u00be\u00f9\u00c6\u00f8\u00ce\u00c2\ndata['Year'] = pd.to_datetime(data['Year'], format='%Y')\ndata.set_index('Year', inplace=True)\n\n# \u00bb\u00e6\u00d6\u00c6\u00c8\u00ab\u00c7\u00f2\u00c6\u00bd\u00be\u00f9\u00c6\u00f8\u00ce\u00c2\u00b1\u00e4\u00bb\u00af\u00cd\u00bc\nplt.figure(figsize=(10, 5))\nplt.plot(data.index, data['J-D'], marker='o', linestyle='-')  # \u00ca\u00b9\u00d3\u00c3\u00c8\u00ab\u00c4\u00ea\u00c6\u00bd\u00be\u00f9\u00c6\u00f8\u00ce\u00c2\u00c1\u00d0 'J-D'\nplt.title('Global Average Temperature Change Over the Years')\nplt.xlabel('Year')\nplt.ylabel('Temperature Anomaly (\u00a1\u00e3C)')\nplt.grid(True)\nplt.show()\n"
        },
        "70": {
            "Question": "Using Python's geopandas and matplotlib libraries, create a graph showing the change in average global temperature recorded in NASA data for each month of the last five years. The data is available from NASA's Open Data Portal.",
            "Answer": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n# NASA GISTEMP \u00c8\u00ab\u00c7\u00f2\u00d4\u00c2\u00c6\u00bd\u00be\u00f9\u00c6\u00f8\u00ce\u00c2\u00ca\u00fd\u00be\u00dd (\u00ca\u00be\u00c0\u00fdURL\u00a3\u00ac\u00c7\u00eb\u00cc\u00e6\u00bb\u00bb\u00ce\u00aa\u00ca\u00b5\u00bc\u00caURL)\ndata_url = \"http://data.giss.nasa.gov/gistemp/tabledata_v4/GLB.Ts+dSST.csv\"\n\n# \u00ca\u00b9\u00d3\u00c3 pandas \u00b6\u00c1\u00c8\u00a1\u00ca\u00fd\u00be\u00dd\ndata = pd.read_csv(data_url, skiprows=1)  # \u00b8\u00f9\u00be\u00dd\u00be\u00df\u00cc\u00e5\u00ce\u00c4\u00bc\u00fe\u00b8\u00f1\u00ca\u00bd\u00bf\u00c9\u00c4\u00dc\u00d0\u00e8\u00d2\u00aa\u00b5\u00f7\u00d5\u00fbskiprows\u00b2\u00ce\u00ca\u00fd\n\n# \u00b2\u00e9\u00bf\u00b4\u00ca\u00fd\u00be\u00dd\u00bd\u00e1\u00b9\u00b9\nprint(data.head())\n\n# \u00b4\u00a6\u00c0\u00ed\u00ca\u00fd\u00be\u00dd\n# \u00bc\u00d9\u00c9\u00e8\u00ca\u00fd\u00be\u00dd\u00d6\u00d0\u00d3\u00d0 'Year', 'Jan', 'Feb', ..., 'Dec' \u00c1\u00d0\u00a3\u00ac\u00d2\u00d4\u00bc\u00b0\u00d2\u00bb\u00b8\u00f6 'J-D' \u00c1\u00d0\u00b4\u00fa\u00b1\u00ed\u00c8\u00ab\u00c4\u00ea\u00c6\u00bd\u00be\u00f9\ndata['Date'] = pd.to_datetime(data['Year'].astype(str), format='%Y')\ndata.set_index('Date', inplace=True)\n\n# \u00c9\u00b8\u00d1\u00a1\u00d7\u00ee\u00bd\u00fc\u00ce\u00e5\u00c4\u00ea\u00b5\u00c4\u00ca\u00fd\u00be\u00dd\nrecent_data = data.last('5Y')\n\n# \u00bb\u00e6\u00d6\u00c6\u00c8\u00ab\u00c7\u00f2\u00c6\u00bd\u00be\u00f9\u00c6\u00f8\u00ce\u00c2\u00b1\u00e4\u00bb\u00af\u00cd\u00bc\nplt.figure(figsize=(10, 5))\nplt.plot(recent_data.index, recent_data['J-D'], marker='o', linestyle='-', color='blue')\nplt.title('Global Average Temperature Change Over the Last Five Years')\nplt.xlabel('Year')\nplt.ylabel('Temperature Anomaly (\u00a1\u00e3C)')\nplt.grid(True)\nplt.show()\n"
        },
        "71": {
            "Question": "Code was generated using Python's matplotlib library to create maps showing the population and location of five major U.S. cities (e.g., New York, Los Angeles, Chicago, Houston, Phoenix).",
            "Answer": "import matplotlib.pyplot as plt\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature  # \u00c8\u00b7\u00b1\u00a3\u00d5\u00e2\u00b8\u00f6\u00b5\u00bc\u00c8\u00eb\u00ca\u00c7\u00d5\u00fd\u00c8\u00b7\u00b5\u00c4\n\n# \u00b3\u00c7\u00ca\u00d0\u00ca\u00fd\u00be\u00dd\u00a3\u00ba\u00b3\u00c7\u00ca\u00d0\u00c3\u00fb\u00a3\u00ac\u00ce\u00b3\u00b6\u00c8\u00a3\u00ac\u00be\u00ad\u00b6\u00c8\u00a3\u00ac\u00c8\u00cb\u00bf\u00da\ncities = {\n    'New York': {'lat': 40.7128, 'lon': -74.0060, 'population': 8419000},\n    'Los Angeles': {'lat': 34.0522, 'lon': -118.2437, 'population': 3971000},\n    'Chicago': {'lat': 41.8781, 'lon': -87.6298, 'population': 2716000},\n    'Houston': {'lat': 29.7604, 'lon': -95.3698, 'population': 2313000},\n    'Phoenix': {'lat': 33.4484, 'lon': -112.0740, 'population': 1663000}\n}\n\n# \u00b4\u00b4\u00bd\u00a8\u00b5\u00d8\u00cd\u00bc\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(1, 1, 1, projection=ccrs.PlateCarree())\nax.set_extent([-125, -66.5, 24, 50], crs=ccrs.PlateCarree())  # \u00c9\u00e8\u00d6\u00c3\u00b5\u00d8\u00cd\u00bc\u00b7\u00b6\u00ce\u00a7\u00a3\u00a8\u00c3\u00c0\u00b9\u00fa\u00a3\u00a9\nax.coastlines()\nax.add_feature(cfeature.STATES, linestyle='-', alpha=0.5)  # \u00ca\u00b9\u00d3\u00c3cfeature\u00b7\u00c3\u00ce\u00caSTATES\n\n# \u00d4\u00da\u00b5\u00d8\u00cd\u00bc\u00c9\u00cf\u00bb\u00e6\u00d6\u00c6\u00b3\u00c7\u00ca\u00d0\u00ce\u00bb\u00d6\u00c3\u00ba\u00cd\u00c8\u00cb\u00bf\u00da\u00d0\u00c5\u00cf\u00a2\nfor city, info in cities.items():\n    ax.plot(info['lon'], info['lat'], marker='o', color='red', markersize=5, transform=ccrs.Geodetic())\n    ax.text(info['lon'] + 1, info['lat'] - 1, f\"{city}\\nPopulation: {info['population']}\", \n            transform=ccrs.Geodetic())\n\nplt.title('Major US Cities: Population and Location')\nplt.show()\n"
        },
        "72": {
            "Question": "Code was generated using Python's matplotlib library to create maps showing the population and location of five major cities in China (e.g., Beijing, Shanghai, Guangzhou, Shenzhen, and Chengdu).",
            "Answer": "import matplotlib.pyplot as plt\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\n\n# \u00b3\u00c7\u00ca\u00d0\u00ca\u00fd\u00be\u00dd\u00a3\u00ba\u00b3\u00c7\u00ca\u00d0\u00c3\u00fb\u00a3\u00ac\u00ce\u00b3\u00b6\u00c8\u00a3\u00ac\u00be\u00ad\u00b6\u00c8\u00a3\u00ac\u00c8\u00cb\u00bf\u00da\ncities = {\n    'Beijing': {'lat': 39.9042, 'lon': 116.4074, 'population': '21.54M'},\n    'Shanghai': {'lat': 31.2304, 'lon': 121.4737, 'population': '24.28M'},\n    'Guangzhou': {'lat': 23.1291, 'lon': 113.2644, 'population': '14.50M'},\n    'Shenzhen': {'lat': 22.5431, 'lon': 114.0579, 'population': '12.53M'},\n    'Chengdu': {'lat': 30.5728, 'lon': 104.0668, 'population': '16.33M'}\n}\n\n# \u00b4\u00b4\u00bd\u00a8\u00b5\u00d8\u00cd\u00bc\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(1, 1, 1, projection=ccrs.PlateCarree())\nax.set_extent([73, 135, 18, 54], crs=ccrs.PlateCarree())  # \u00c9\u00e8\u00d6\u00c3\u00b5\u00d8\u00cd\u00bc\u00b7\u00b6\u00ce\u00a7\u00b8\u00b2\u00b8\u00c7\u00d6\u00d0\u00b9\u00fa\n\n# \u00cc\u00ed\u00bc\u00d3\u00b5\u00d8\u00c0\u00ed\u00cc\u00d8\u00d5\u00f7\nax.add_feature(cfeature.LAND)\nax.add_feature(cfeature.OCEAN)\nax.add_feature(cfeature.COASTLINE)\nax.add_feature(cfeature.BORDERS, linestyle=':')\n\n# \u00d4\u00da\u00b5\u00d8\u00cd\u00bc\u00c9\u00cf\u00bb\u00e6\u00d6\u00c6\u00b3\u00c7\u00ca\u00d0\u00ce\u00bb\u00d6\u00c3\u00ba\u00cd\u00c8\u00cb\u00bf\u00da\u00d0\u00c5\u00cf\u00a2\nfor city, info in cities.items():\n    ax.plot(info['lon'], info['lat'], marker='o', color='red', markersize=5, transform=ccrs.Geodetic())\n    ax.text(info['lon'] + 2, info['lat'] - 1, f\"{city}\\nPopulation: {info['population']}\", \n            transform=ccrs.Geodetic(), fontsize=9)\n\nplt.title('Major Chinese Cities: Population and Location')\nplt.show()\n"
        },
        "73": {
            "Question": "Code was generated using Python's matplotlib library to create maps showing the population and location of five major cities in Japan (e.g., Tokyo, Osaka, Nagoya, Fukuoka, and Yokohama).",
            "Answer": "import matplotlib.pyplot as plt\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\n\n# \u00b3\u00c7\u00ca\u00d0\u00ca\u00fd\u00be\u00dd\u00a3\u00ba\u00b3\u00c7\u00ca\u00d0\u00c3\u00fb\u00a3\u00ac\u00ce\u00b3\u00b6\u00c8\u00a3\u00ac\u00be\u00ad\u00b6\u00c8\u00a3\u00ac\u00c8\u00cb\u00bf\u00da\ncities = {\n    'Tokyo': {'lat': 35.6895, 'lon': 139.6917, 'population': '37.4M'},\n    'Osaka': {'lat': 34.6937, 'lon': 135.5023, 'population': '19.2M'},\n    'Nagoya': {'lat': 35.1815, 'lon': 136.9066, 'population': '9.5M'},\n    'Fukuoka': {'lat': 33.6064, 'lon': 130.4181, 'population': '5.1M'},\n    'Yokohama': {'lat': 35.4437, 'lon': 139.6380, 'population': '3.7M'}\n}\n\n# \u00b4\u00b4\u00bd\u00a8\u00b5\u00d8\u00cd\u00bc\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(1, 1, 1, projection=ccrs.PlateCarree())\nax.set_extent([129, 146, 30, 46], crs=ccrs.PlateCarree())  # \u00c9\u00e8\u00d6\u00c3\u00b5\u00d8\u00cd\u00bc\u00b7\u00b6\u00ce\u00a7\u00b8\u00b2\u00b8\u00c7\u00c8\u00d5\u00b1\u00be\n\n# \u00cc\u00ed\u00bc\u00d3\u00b5\u00d8\u00c0\u00ed\u00cc\u00d8\u00d5\u00f7\nax.add_feature(cfeature.LAND)\nax.add_feature(cfeature.OCEAN)\nax.add_feature(cfeature.COASTLINE)\nax.add_feature(cfeature.BORDERS, linestyle=':')\n\n# \u00d4\u00da\u00b5\u00d8\u00cd\u00bc\u00c9\u00cf\u00bb\u00e6\u00d6\u00c6\u00b3\u00c7\u00ca\u00d0\u00ce\u00bb\u00d6\u00c3\u00ba\u00cd\u00c8\u00cb\u00bf\u00da\u00d0\u00c5\u00cf\u00a2\nfor city, info in cities.items():\n    ax.plot(info['lon'], info['lat'], marker='o', color='red', markersize=5, transform=ccrs.Geodetic())\n    ax.text(info['lon'] + 0.5, info['lat'], f\"{city}\\n{info['population']}\", \n            transform=ccrs.Geodetic(), horizontalalignment='left', fontsize=9)\n\nplt.title('Major Japanese Cities: Population and Location')\nplt.show()\n"
        },
        "74": {
            "Question": "Code was generated using Python's matplotlib library to create maps showing the population and location of five major Australian cities (e.g., Sydney, Melbourne, Brisbane, Perth, Adelaide).",
            "Answer": "import matplotlib.pyplot as plt\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\n\n# \u00b3\u00c7\u00ca\u00d0\u00ca\u00fd\u00be\u00dd\u00a3\u00ba\u00b3\u00c7\u00ca\u00d0\u00c3\u00fb\u00a3\u00ac\u00ce\u00b3\u00b6\u00c8\u00a3\u00ac\u00be\u00ad\u00b6\u00c8\u00a3\u00ac\u00c8\u00cb\u00bf\u00da\ncities = {\n    'Sydney': {'lat': -33.8688, 'lon': 151.2093, 'population': '5.3M'},\n    'Melbourne': {'lat': -37.8136, 'lon': 144.9631, 'population': '5.0M'},\n    'Brisbane': {'lat': -27.4698, 'lon': 153.0251, 'population': '2.5M'},\n    'Perth': {'lat': -31.9505, 'lon': 115.8605, 'population': '2.0M'},\n    'Adelaide': {'lat': -34.9285, 'lon': 138.6007, 'population': '1.3M'}\n}\n\n# \u00b4\u00b4\u00bd\u00a8\u00b5\u00d8\u00cd\u00bc\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(1, 1, 1, projection=ccrs.PlateCarree())\nax.set_extent([110, 155, -45, -10], crs=ccrs.PlateCarree())  # \u00c9\u00e8\u00d6\u00c3\u00b5\u00d8\u00cd\u00bc\u00b7\u00b6\u00ce\u00a7\u00b8\u00b2\u00b8\u00c7\u00b0\u00c4\u00b4\u00f3\u00c0\u00fb\u00d1\u00c7\n\n# \u00cc\u00ed\u00bc\u00d3\u00b5\u00d8\u00c0\u00ed\u00cc\u00d8\u00d5\u00f7\nax.add_feature(cfeature.LAND)\nax.add_feature(cfeature.OCEAN)\nax.add_feature(cfeature.COASTLINE)\nax.add_feature(cfeature.BORDERS, linestyle=':')\n\n# \u00d4\u00da\u00b5\u00d8\u00cd\u00bc\u00c9\u00cf\u00bb\u00e6\u00d6\u00c6\u00b3\u00c7\u00ca\u00d0\u00ce\u00bb\u00d6\u00c3\u00ba\u00cd\u00c8\u00cb\u00bf\u00da\u00d0\u00c5\u00cf\u00a2\nfor city, info in cities.items():\n    ax.plot(info['lon'], info['lat'], marker='o', color='red', markersize=5, transform=ccrs.Geodetic())\n    ax.text(info['lon'] + 1, info['lat'], f\"{city}\\n{info['population']}\", \n            transform=ccrs.Geodetic(), horizontalalignment='left', fontsize=9)\n\nplt.title('Major Australian Cities: Population and Location')\nplt.show()\n"
        },
        "75": {
            "Question": "Code was generated using Python's matplotlib library to create maps showing the population and location of five major cities in South Korea (e.g., Seoul, Busan, Daegu, Incheon, and Gwangju).",
            "Answer": "import matplotlib.pyplot as plt\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\n\n# \u00b3\u00c7\u00ca\u00d0\u00ca\u00fd\u00be\u00dd\u00a3\u00ba\u00b3\u00c7\u00ca\u00d0\u00c3\u00fb\u00a3\u00ac\u00ce\u00b3\u00b6\u00c8\u00a3\u00ac\u00be\u00ad\u00b6\u00c8\u00a3\u00ac\u00c8\u00cb\u00bf\u00da\ncities = {\n    'Seoul': {'lat': 37.5665, 'lon': 126.9780, 'population': '9.7M'},\n    'Busan': {'lat': 35.1796, 'lon': 129.0756, 'population': '3.4M'},\n    'Daegu': {'lat': 35.8714, 'lon': 128.6014, 'population': '2.4M'},\n    'Incheon': {'lat': 37.4563, 'lon': 126.7052, 'population': '3.0M'},\n    'Gwangju': {'lat': 35.1595, 'lon': 126.8526, 'population': '1.5M'}\n}\n\n# \u00b4\u00b4\u00bd\u00a8\u00b5\u00d8\u00cd\u00bc\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(1, 1, 1, projection=ccrs.PlateCarree())\nax.set_extent([124, 130, 33, 39], crs=ccrs.PlateCarree())  # \u00c9\u00e8\u00d6\u00c3\u00b5\u00d8\u00cd\u00bc\u00b7\u00b6\u00ce\u00a7\u00b8\u00b2\u00b8\u00c7\u00ba\u00ab\u00b9\u00fa\n\n# \u00cc\u00ed\u00bc\u00d3\u00b5\u00d8\u00c0\u00ed\u00cc\u00d8\u00d5\u00f7\nax.add_feature(cfeature.LAND)\nax.add_feature(cfeature.OCEAN)\nax.add_feature(cfeature.COASTLINE)\nax.add_feature(cfeature.BORDERS, linestyle=':')\n\n# \u00d4\u00da\u00b5\u00d8\u00cd\u00bc\u00c9\u00cf\u00bb\u00e6\u00d6\u00c6\u00b3\u00c7\u00ca\u00d0\u00ce\u00bb\u00d6\u00c3\u00ba\u00cd\u00c8\u00cb\u00bf\u00da\u00d0\u00c5\u00cf\u00a2\nfor city, info in cities.items():\n    ax.plot(info['lon'], info['lat'], marker='o', color='red', markersize=5, transform=ccrs.Geodetic())\n    ax.text(info['lon'] + 0.1, info['lat'], f\"{city}\\n{info['population']}\", \n            transform=ccrs.Geodetic(), horizontalalignment='left', fontsize=9)\n\nplt.title('Major South Korean Cities: Population and Location')\nplt.show()\n"
        },
        "76": {
            "Question": "Generate code using Python's matplotlib library to create a map showing the major river systems in the United States (e.g., Mississippi, Colorado, Columbia).",
            "Answer": "import matplotlib.pyplot as plt\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\n\n# \u00b4\u00b4\u00bd\u00a8\u00b5\u00d8\u00cd\u00bc\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(1, 1, 1, projection=ccrs.PlateCarree())\n\n# \u00c9\u00e8\u00d6\u00c3\u00b5\u00d8\u00cd\u00bc\u00b7\u00b6\u00ce\u00a7\u00d2\u00d4\u00b8\u00b2\u00b8\u00c7\u00c3\u00c0\u00b9\u00fa\u00b4\u00f3\u00b2\u00bf\u00b7\u00d6\u00b5\u00d8\u00c7\u00f8\nax.set_extent([-125, -66.5, 24, 50], crs=ccrs.PlateCarree())\n\n# \u00cc\u00ed\u00bc\u00d3\u00b5\u00d8\u00c0\u00ed\u00cc\u00d8\u00d5\u00f7\nax.add_feature(cfeature.LAND)\nax.add_feature(cfeature.OCEAN)\nax.add_feature(cfeature.COASTLINE)\nax.add_feature(cfeature.BORDERS, linestyle=':')\n\n# \u00bb\u00e6\u00d6\u00c6\u00ba\u00d3\u00c1\u00f7\nrivers = cfeature.NaturalEarthFeature(category='physical', name='rivers_lake_centerlines',\n                                      scale='10m', facecolor='none', edgecolor='b')\nax.add_feature(rivers, linewidth=1)  # \u00d0\u00de\u00b8\u00c4linewidth\u00d2\u00d4\u00ca\u00ca\u00d3\u00a6\u00ca\u00d3\u00be\u00f5\u00d0\u00a7\u00b9\u00fb\n\n# \u00b1\u00ea\u00bc\u00c7\u00d6\u00f7\u00d2\u00aa\u00ba\u00d3\u00c1\u00f7\nmajor_rivers = {\n    'Mississippi River': {'lat': 35.0, 'lon': -90.0},\n    'Colorado River': {'lat': 33.0, 'lon': -115.0},\n    'Columbia River': {'lat': 46.0, 'lon': -119.0}\n}\n\nfor river, loc in major_rivers.items():\n    ax.text(loc['lon'], loc['lat'], river, transform=ccrs.Geodetic(), fontsize=9,\n            horizontalalignment='center', color='blue')\n\nplt.title('Major US Rivers')\nplt.show()\n"
        },
        "77": {
            "Question": "Code was generated using Python's matplotlib library to create maps showing the major mountain ranges of South America (e.g., Andes, Brazilian Highlands).",
            "Answer": "import matplotlib.pyplot as plt\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\n\n# \u00b4\u00b4\u00bd\u00a8\u00b5\u00d8\u00cd\u00bc\nfig = plt.figure(figsize=(10, 12))\nax = fig.add_subplot(1, 1, 1, projection=ccrs.PlateCarree())\n\n# \u00c9\u00e8\u00d6\u00c3\u00b5\u00d8\u00cd\u00bc\u00b7\u00b6\u00ce\u00a7\u00b5\u00bd\u00c4\u00cf\u00c3\u00c0\u00d6\u00de\nax.set_extent([-81, -34, -55, 13], crs=ccrs.PlateCarree())\n\n# \u00cc\u00ed\u00bc\u00d3\u00b5\u00d8\u00d0\u00ce\nax.add_feature(cfeature.LAND)\nax.add_feature(cfeature.OCEANS)\nax.add_feature(cfeature.COASTLINE)\nax.add_feature(cfeature.BORDERS, linestyle=':')\n\n# \u00cc\u00ed\u00bc\u00d3\u00c9\u00bd\u00c2\u00f6\u00ce\u00bb\u00d6\u00c3\u00a3\u00a8\u00b0\u00b2\u00b5\u00da\u00cb\u00b9\u00c9\u00bd\u00c2\u00f6\u00ba\u00cd\u00b0\u00cd\u00ce\u00f7\u00b8\u00df\u00d4\u00ad\u00a3\u00a9\n# \u00b0\u00b2\u00b5\u00da\u00cb\u00b9\u00c9\u00bd\u00c2\u00f6\u00b4\u00f3\u00d6\u00c2\u00ce\u00bb\u00d6\u00c3\nandes_lon, andes_lat = [-71], [-31]  # \u00d5\u00e2\u00ca\u00c7\u00d2\u00bb\u00b8\u00f6\u00ca\u00be\u00c0\u00fd\u00b5\u00e3\nax.plot(andes_lon, andes_lat, 'o', markersize=10, markerfacecolor='red', transform=ccrs.Geodetic(), label='Andes Mountains')\n\n# \u00b0\u00cd\u00ce\u00f7\u00b8\u00df\u00d4\u00ad\u00b4\u00f3\u00d6\u00c2\u00ce\u00bb\u00d6\u00c3\nbrazil_plateau_lon, brazil_plateau_lat = [-49], [-15]\nax.plot(brazil_plateau_lon, brazil_plateau_lat, 'o', markersize=10, markerfacecolor='blue', transform=ccrs.Geodetic(), label='Brazilian Plateau')\n\n# \u00cc\u00ed\u00bc\u00d3\u00cd\u00bc\u00c0\u00fd\nax.legend(loc='upper left')\n\n# \u00cc\u00ed\u00bc\u00d3\u00b5\u00d8\u00d0\u00ce\u00cd\u00bc\u00b2\u00e3\u00d2\u00d4\u00d4\u00f6\u00c7\u00bf\u00ca\u00d3\u00be\u00f5\u00d0\u00a7\u00b9\u00fb\nax.add_feature(cfeature.LAKES, alpha=0.5)\nax.add_feature(cfeature.RIVERS)\n\n# \u00cf\u00d4\u00ca\u00be\u00cd\u00bc\u00b1\u00ed\nplt.title('Major Mountain Ranges in South America')\nplt.show()\n"
        },
        "78": {
            "Question": "Code was generated using Python's matplotlib library to create maps showing the population and location of five major Russian cities (e.g., Moscow, St. Petersburg, Novosibirsk, Yekaterinburg, and Kazan).",
            "Answer": "import matplotlib.pyplot as plt\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\n\n# \u00b3\u00c7\u00ca\u00d0\u00ca\u00fd\u00be\u00dd\u00a3\u00ba\u00b3\u00c7\u00ca\u00d0\u00c3\u00fb\u00a3\u00ac\u00ce\u00b3\u00b6\u00c8\u00a3\u00ac\u00be\u00ad\u00b6\u00c8\u00a3\u00ac\u00c8\u00cb\u00bf\u00da\ncities = {\n    'Moscow': {'lat': 55.7558, 'lon': 37.6173, 'population': '12.6M'},\n    'Saint Petersburg': {'lat': 59.9343, 'lon': 30.3351, 'population': '5.4M'},\n    'Novosibirsk': {'lat': 55.0084, 'lon': 82.9357, 'population': '1.6M'},\n    'Yekaterinburg': {'lat': 56.8389, 'lon': 60.6057, 'population': '1.5M'},\n    'Kazan': {'lat': 55.8304, 'lon': 49.0661, 'population': '1.2M'}\n}\n\n# \u00b4\u00b4\u00bd\u00a8\u00b5\u00d8\u00cd\u00bc\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(1, 1, 1, projection=ccrs.PlateCarree())\nax.set_extent([20, 140, 40, 80], crs=ccrs.PlateCarree())  # \u00c9\u00e8\u00d6\u00c3\u00b5\u00d8\u00cd\u00bc\u00b7\u00b6\u00ce\u00a7\u00b8\u00b2\u00b8\u00c7\u00b6\u00ed\u00c2\u00de\u00cb\u00b9\u00b5\u00c4\u00b4\u00f3\u00b2\u00bf\u00b7\u00d6\u00b5\u00d8\u00c7\u00f8\n\n# \u00cc\u00ed\u00bc\u00d3\u00b5\u00d8\u00c0\u00ed\u00cc\u00d8\u00d5\u00f7\nax.add_feature(cfeature.LAND)\nax.add_feature(cfeature.OCEAN)\nax.add_feature(cfeature.COASTLINE)\nax.add_feature(cfeature.BORDERS, linestyle=':')\n\n# \u00d4\u00da\u00b5\u00d8\u00cd\u00bc\u00c9\u00cf\u00bb\u00e6\u00d6\u00c6\u00b3\u00c7\u00ca\u00d0\u00ce\u00bb\u00d6\u00c3\u00ba\u00cd\u00c8\u00cb\u00bf\u00da\u00d0\u00c5\u00cf\u00a2\nfor city, info in cities.items():\n    ax.plot(info['lon'], info['lat'], marker='o', color='red', markersize=5, transform=ccrs.Geodetic())\n    ax.text(info['lon'] + 2, info['lat'], f\"{city}\\nPopulation: {info['population']}\", \n            transform=ccrs.Geodetic(), horizontalalignment='left', fontsize=9)\n\nplt.title('Major Russian Cities: Population and Location')\nplt.show()\n"
        },
        "79": {
            "Question": "Code was generated using Python's matplotlib library to create maps showing the population and location of five major Brazilian cities (e.g., S?o Paulo, Rio de Janeiro, Salvador, Bras\u00a8\u00aalia, and Fortaleza).",
            "Answer": "import matplotlib.pyplot as plt\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\n\n# \u00b3\u00c7\u00ca\u00d0\u00ca\u00fd\u00be\u00dd\u00a3\u00ba\u00b3\u00c7\u00ca\u00d0\u00c3\u00fb\u00a3\u00ac\u00ce\u00b3\u00b6\u00c8\u00a3\u00ac\u00be\u00ad\u00b6\u00c8\u00a3\u00ac\u00c8\u00cb\u00bf\u00da\ncities = {\n    'S?o Paulo': {'lat': -23.5505, 'lon': -46.6333, 'population': '12.3M'},\n    'Rio de Janeiro': {'lat': -22.9068, 'lon': -43.1729, 'population': '6.7M'},\n    'Salvador': {'lat': -12.9714, 'lon': -38.5014, 'population': '2.9M'},\n    'Bras\u00a8\u00aalia': {'lat': -15.7942, 'lon': -47.8822, 'population': '3.0M'},\n    'Fortaleza': {'lat': -3.7172, 'lon': -38.5433, 'population': '2.7M'}\n}\n\n# \u00b4\u00b4\u00bd\u00a8\u00b5\u00d8\u00cd\u00bc\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(1, 1, 1, projection=ccrs.PlateCarree())\nax.set_extent([-75, -34, -34, 5], crs=ccrs.PlateCarree())  # \u00c9\u00e8\u00d6\u00c3\u00b5\u00d8\u00cd\u00bc\u00b7\u00b6\u00ce\u00a7\u00b8\u00b2\u00b8\u00c7\u00b0\u00cd\u00ce\u00f7\n\n# \u00cc\u00ed\u00bc\u00d3\u00b5\u00d8\u00c0\u00ed\u00cc\u00d8\u00d5\u00f7\nax.add_feature(cfeature.LAND)\nax.add_feature(cfeature.OCEAN)\nax.add_feature(cfeature.COASTLINE)\nax.add_feature(cfeature.BORDERS, linestyle=':')\n\n# \u00d4\u00da\u00b5\u00d8\u00cd\u00bc\u00c9\u00cf\u00bb\u00e6\u00d6\u00c6\u00b3\u00c7\u00ca\u00d0\u00ce\u00bb\u00d6\u00c3\u00ba\u00cd\u00c8\u00cb\u00bf\u00da\u00d0\u00c5\u00cf\u00a2\nfor city, info in cities.items():\n    ax.plot(info['lon'], info['lat'], marker='o', color='red', markersize=5, transform=ccrs.Geodetic())\n    ax.text(info['lon'] + 1, info['lat'], f\"{city}\\nPopulation: {info['population']}\", \n            transform=ccrs.Geodetic(), horizontalalignment='left', fontsize=9)\n\nplt.title('Major Brazilian Cities: Population and Location')\nplt.show()\n"
        },
        "80": {
            "Question": "Generate code using Python's matplotlib library to create maps showing the population and location of five major cities in India (e.g., Mumbai, Delhi, Bangalore, Kolkata, Madras).",
            "Answer": "import matplotlib.pyplot as plt\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\n\n# \u00b3\u00c7\u00ca\u00d0\u00ca\u00fd\u00be\u00dd\u00a3\u00ba\u00b3\u00c7\u00ca\u00d0\u00c3\u00fb\u00a3\u00ac\u00ce\u00b3\u00b6\u00c8\u00a3\u00ac\u00be\u00ad\u00b6\u00c8\u00a3\u00ac\u00c8\u00cb\u00bf\u00da\ncities = {\n    'Mumbai': {'lat': 19.0760, 'lon': 72.8777, 'population': '12.5M'},\n    'Delhi': {'lat': 28.7041, 'lon': 77.1025, 'population': '11.0M'},\n    'Bangalore': {'lat': 12.9716, 'lon': 77.5946, 'population': '8.5M'},\n    'Kolkata': {'lat': 22.5726, 'lon': 88.3639, 'population': '4.5M'},\n    'Madras': {'lat': 13.0827, 'lon': 80.2707, 'population': '4.6M'}  # Madras is now known as Chennai\n}\n\n# \u00b4\u00b4\u00bd\u00a8\u00b5\u00d8\u00cd\u00bc\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(1, 1, 1, projection=ccrs.PlateCarree())\nax.set_extent([68, 90, 5, 35], crs=ccrs.PlateCarree())  # \u00c9\u00e8\u00d6\u00c3\u00b5\u00d8\u00cd\u00bc\u00b7\u00b6\u00ce\u00a7\u00b8\u00b2\u00b8\u00c7\u00d3\u00a1\u00b6\u00c8\n\n# \u00cc\u00ed\u00bc\u00d3\u00b5\u00d8\u00c0\u00ed\u00cc\u00d8\u00d5\u00f7\nax.add_feature(cfeature.LAND)\nax.add_feature(cfeature.OCEAN)\nax.add_feature(cfeature.COASTLINE)\nax.add_feature(cfeature.BORDERS, linestyle=':')\n\n# \u00d4\u00da\u00b5\u00d8\u00cd\u00bc\u00c9\u00cf\u00bb\u00e6\u00d6\u00c6\u00b3\u00c7\u00ca\u00d0\u00ce\u00bb\u00d6\u00c3\u00ba\u00cd\u00c8\u00cb\u00bf\u00da\u00d0\u00c5\u00cf\u00a2\nfor city, info in cities.items():\n    ax.plot(info['lon'], info['lat'], marker='o', color='red', markersize=5, transform=ccrs.Geodetic())\n    ax.text(info['lon'] + 0.5, info['lat'], f\"{city}\\nPopulation: {info['population']}\", \n            transform=ccrs.Geodetic(), horizontalalignment='left', fontsize=9)\n\nplt.title('Major Indian Cities: Population and Location')\nplt.show()\n"
        }
    }
}